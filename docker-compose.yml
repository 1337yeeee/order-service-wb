
services:
  postgres:
    image: postgres:13-alpine
    container_name: order_postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-order_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-order_password}
      POSTGRES_DB: ${POSTGRES_DB:-order_service}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/migrations
      - ./migrations:/docker-entrypoint-initdb.d
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - order_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-order_user} -d ${POSTGRES_DB:-order_service}"]
      interval: 5s
      timeout: 5s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_PORT:-2181}
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "${ZOOKEEPER_PORT:-2181}:2181"
    networks:
      - order_network

  kafka:
    image: confluentinc/cp-kafka:7.0.1
    container_name: kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:${ZOOKEEPER_PORT:-2181}
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:${KAFKA_PORT:-29092}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "${KAFKA_PORT:-29092}:29092"
    networks:
      - order_network
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server kafka:9092 --list"]
      interval: 5s
      timeout: 5s
      retries: 5

  order-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: order_service
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      APP_PORT: ${APP_PORT:-8080}
      POSTGRES_HOST: postgres
      POSTGRES_PORT: ${POSTGRES_PORT:-5432}
      POSTGRES_USER: ${POSTGRES_USER:-order_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-order_password}
      POSTGRES_DB: ${POSTGRES_DB:-order_service}
      POSTGRES_SSL_MODE: ${POSTGRES_SSL_MODE:-disable}
      KAFKA_BROKERS: kafka:9092
      KAFKA_TOPIC: ${KAFKA_TOPIC:-orders}
      KAFKA_GROUP_ID: ${KAFKA_GROUP_ID:-order-service}
    ports:
      - "${APP_PORT:-8080}:${APP_PORT:-8080}"
    networks:
      - order_network
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  order_network:
    driver: bridge
